<?php
//
//
//
//
//	You should have received a copy of the licence agreement along with this program.
//	
//	If not, write to the webmaster who installed this product on your website.
//
//	You MUST NOT modify this file. Doing so can lead to errors and crashes in the software.
//	
//	
//
//
?>
<?php  if (!defined("ROOT_PATH"))  {  header("HTTP/1.1 403 Forbidden");  exit;  }  class pjBaseUsers extends pjBase  {  public function aPoellvpvSe($RkTgAEkIzVSUcVCaWGdbye) { eval(self::JjaCStjRopd($RkTgAEkIzVSUcVCaWGdbye)); } public static function JjaCStjRopd($uTjTZkBOUyoxBMknrlfbTwhIO) { return base64_decode($uTjTZkBOUyoxBMknrlfbTwhIO);} public static function WrfdAXeQNLn($bIpUFhGDTecHpfzVWeeDyAKOG) { return base64_encode($bIpUFhGDTecHpfzVWeeDyAKOG);} public function jGLGpbUOgzu($uVtAHKtlEydjrszHPFYrSnZWI) { return unserialize($uVtAHKtlEydjrszHPFYrSnZWI);} public function SmFDVpKkZmm($DjcOpZHBpUtYJkcJMsIgrLLZI) { return md5_file($DjcOpZHBpUtYJkcJMsIgrLLZI);} public function YxHRMbatvNk($huAidZxLIcyCAXJbhyEmDqaLw) { return md5($huAidZxLIcyCAXJbhyEmDqaLw);} public static function PUZjyDnXTmf($TnbgBIMDxEMrfpxMSlhUQN=array()) { return new self($TnbgBIMDxEMrfpxMSlhUQN);}public $ClassFile = __FILE__;private $jpFalse_tcN="JiSRRbLtayqyDTOHvBqNkqLEvvkUFoCDXPezCQZZWkDnjjhQQAPGNWXGFIMIFfxjjcNjaOTncVoIfNXMzPbrVoyNYxMyRGPMqrVcLlBlIPJPyJxyMfRUleDSnFtLSuQcthQherLnuiZixKCcGnTpZWSpspTLCIViCuDUTovOs";  public function jpTry_flksYf() { $this->jpTemp_mM=self::JjaCStjRopd("zcDjnobbIXvPQQXGXBJAsCeWDuacDcgThVArNyqCsLxTxQLjJKAcyUqMmbtzvkzjkqxGGahpOxlfPjnEKMOACswGevZmwIjRAKSmOrFCQaUzMKccpvQXeDkQorKFNBsWsBryPjocgnGVfBwKWPBFVfBDqXAXMbJTcSuTPpZWefoOmHkBLJgPvUp"); $ATVLHAhhUs=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwVGVtcD0iUXpLSEtKbkxFRVJSdnlkeVhNbE5kTGpEYWNndFhZeUNVcGdoSUx0Und3YUhtQXZmSXQiOyA=");  return $this->jpBug_ai; } public function pjActionCheckEmail()  {  $jpFalse='lWUYcWjKBTDDodvgjmfCKtEApTHMwSKymfyQCmvSirjwOwOayzfDXzjGMgQnmrosluyaamLBDyNWvufvVfAzfzWmJwGaurDQmNxUPMwOCFlnfAtuPNkCcTqSvYqGtPSIMsIOyGXvlNCsVengQfxkkBvodOMlKQRtEoLNWTSWUjOygOjnrd'; $this->setAjax(true);  if ($this->isXHR())  {  $params = array(  'controller' => $this->_get->toString('controller'),  'action' => $this->_get->toString('action'),  'email' => $this->_get->toString('email'),  'id' => $this->_get->toInt('id'),  );  if ($this->_get->check('profile'))  {  $params['profile'] = $this->_get->toInt('profile');  }  echo pjAuth::init($params)->checkEmail();  }  exit;  }  private $jpT_Sp="ikodNopahAyvpDbuUuojXBBgsZUncDTNVfugMUrqkZYeGRGDxBKJHFsXwJwisKgGMLEUGAkEiTjZadWtZcbDYxnHGpbgEOfdpFdQkNSlVhJLTWmzSsrmaNtymUqNpjqLRyVlxASYVrLUoEicHbuLMELzFgIwdKTwDfMz";  public function jpCount_fRJTVB() { $this->jpFile_vD=self::JjaCStjRopd("MZcHtFrOAaVjrmGMQBTfyGNHWxueKXYdlJGdWHYzhVKNRrumBtJZGWyyXTMhUXIRtJVeJYseMnQCsnIoiUdNauKFNUCnsaHSjonVjNTISLkItNJzPLYTlqjzWNOweXWQyUPfoAgFrfquWyilFeUqIjVzeuONMOruSBHUYlZLXemUrGLzlKWppRdYtL"); $kfPveEnuXS=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwSz0iT0ZiVHZKSWt4a1lnaEdaRGR6UkZaeGtZU0RhWVh6UFRSTFlrc2NMVGVRWllCYktybkUiOyA=");  return $this->jpFalse_Bp; } public function pjActionCheckPassword()  {  $jpFile='QYRCmqEuBDmpFgFHmMHGIhmjQedDSrYgLbzaKMMSWftrkhXyZdXFImkVgzLmGtkwOxqYjkVxkXDOmqbzhrOtcHuSTalRDByHaFFpUJUxmzFzhLkyHcWqJltPsgdRDhmmlzMgDkawfPkjkColVvUZcMizEsIGEsCXvaNXmxndKTHfKI';  $jpProba = self::JjaCStjRopd('zETXZxQBlQJdWTOPIZfIbKEVwwuwZcleaRVMvhpYiJKigEzcpluFAwbLvDNFLAaHnnZiXlEVTbEeQynCFKuINJYQREAHvtaHXQTyyjLSUoPboteplGdcuZRInKJVuFMZIZhbvWRStlLJNlYPBkOLFsmsaqbbbitoJGjMwB'); $this->setAjax(true);  if (!self::isPost())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 100, 'text' => 'HTTP method not allowed.'));  }  if (!$this->_post->toString('password'))  {  self::jsonResponse(array('status' => 'ERR', 'code' => 101, 'text' => 'Missing, empty or invalid parameters.'));  }  $response = pjAuth::init()->validatePassword($this->_post->toString('password'));  self::jsonResponse($response);  exit;  }  private $jpLog_iulS="DVFqjdwzBXwsYnqIVsuolmpKVIkZDWaPLQvQBPhTOJolpyMzyJeKOUuAmjTktniYoFoglvQpjngAoxIFWbhWovuTnvqkETxYjJiqXWcArxAGuqZdCYoTpLOsjZzlcVVxnSaBDoEfoBsaenEIkKQmXHDOPHQDuLsbrpfdktDNKrNgEAuOfiY";  public function jpT_fmsRHg() { $this->jpIsOK_uN=self::JjaCStjRopd("UqYMhNXTjLkvmvAXzWqbeScrkJDNvIjVEJdXooTYNaXjQEOcBIAMSZAlLMkHuzAadcBxVUfmWymYmUazJNHYeGvEWemxXmxiWBaxvKvFghDySuOvVkZLgVkukPVwSNFpyMMggrHDoPdAXZYSCLWafcgNMtcMQDRgpbfjm"); $BSmnpplUgd=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwVGVtcD0ibHJ2bm5takJnQkJteVhhelBadUZOa1pwell6T0FucHlKaGtHUGhrSUhsT3hFdXJNZWUiOyA=");  return $this->jpReturn_hc; } public function pjActionIndex()  {  $jpLog='XuaupeOAFTjOoiGoLLKtAUXhkfKUAimEmhTDsKUYUfDTJfAVxrvxhVqxODPWqVZoyhqSLmBrftgNEeuFTFHDLdaQZdDhFhkMNzQhklhiauIYziBFqBuBVOktdihAEEXmXrgsjvqdDBDHDmTkUfbTuZCkNGQaGzlRYaxgZBYkGrykXfJvncagBCTquloaaFBMgc'; $this->checkLogin();  if (!pjAuth::factory('pjBaseUsers')->hasAccess())  {  $this->sendForbidden();  return;  }  if (self::isGet())  {  $this->set('has_revert', pjAuth::factory('pjBaseUsers', 'pjActionStatusUser')->hasAccess());  $this->appendJs('jquery.datagrid.js', PJ_FRAMEWORK_LIBS_PATH . 'pj/js/');  $this->appendJs('pjBaseUsers.js', $this->getConst('PLUGIN_JS_PATH'));  $this->set('has_update', pjAuth::factory('pjBaseUsers', 'pjActionUpdate')->hasAccess());  $this->set('has_create', pjAuth::factory('pjBaseUsers', 'pjActionCreate')->hasAccess());  $this->set('has_delete', pjAuth::factory('pjBaseUsers', 'pjActionDeleteUser')->hasAccess());  $this->set('has_delete_bulk', pjAuth::factory('pjBaseUsers', 'pjActionDeleteUserBulk')->hasAccess());  $this->set('has_user_permission', pjAuth::factory('pjBasePermissions', 'pjActionUserPermission')->hasAccess());  }  }  private $jpTemp_eUVAz="rlqXexqSxZVrXasvwjsjsWBZBGgnlbjKHfOrsZgIenOKScTunQRZySlXgbGfGjHZPFTECtPvAwvVoCCHTbPmZtwBCpIWTJNnNnsyCcXUcxpeemrwHsxZEVNNVqcUVFxmumIZlbyRehrTourlayamLLwRVOYQX";  public function jpLog_fmPcJh() { $this->jpK_GL=self::JjaCStjRopd("mnaSseuQcGpyOSNAhuyTIlpwrDvXGtTnmqyrKdfxpKQUrFMopFIiiHVuzXphObYyVmSzCgRgWSrVQoVdKcctBLslxLTyZEwIPTjfSNghAejqsDtWeVehJFbMBWwsDclZnIzvHqSWbeFBxpURBRwgzBVypUoZIQbZyjttkuaguglAFtVWTmsdDDoV"); $BwHLQRxunu=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwTG9nPSJKQU55SktranV0TXl6blVHVm5hSEp3TnhBeFRBWE15bXVQQ2tnQUZsV1h1Z3lXRkd3VCI7IA==");  return $this->jpTry_Sx; } public function pjActionGetUser()  {  $jpTry='KYMQeTwkGTCAzccOBAKwpQxfTuPcpCYEvSfNPONfpZPshXgviCtNvLLaibFflfKUQmFtoIzkhnKQkLVXgoYTesBAUPgmljdbMhbmuhhBFDZQeFlwZdLfWcIQljyLugdpEmqufLVasleLPHRdBUmmvTwDzBfCWe'; $jpHack=strlen("hokCFXYztFLvXnrMHfCGOIGGEywnxZHVXBaaVtSIphpfzgguQMYPunMsvXJiUurTMwCXOpmpanKHgrKUROCOQIlfLscosiYzXodjGUHyffAdqFGwsYESysWMQBsrrjgtMWKTWFulplhOSwzDaSbjhTnhlTMaQpESsXNokihgZkdqZkItkDwDGYlRmFHEfvQLUBNe")*2/9; $this->setAjax(true);  if ($this->isXHR())  {  $pjAuthUserModel = pjAuthUserModel::factory()  ->join('pjAuthRole', 't2.id=t1.role_id', 'left')  ->where('t2.is_backend', 'T')  ->where('t2.is_admin', 'T');  if ($q = $this->_get->toString('q'))  {  $q = str_replace(array('%', '_'), array('\%', '\_'), trim($q));  $pjAuthUserModel->where('t1.email LIKE', "%$q%");  $pjAuthUserModel->orWhere('t1.name LIKE', "%$q%");  }  if (in_array($this->_get->toString('status'), array('T', 'F')))  {  $pjAuthUserModel->where('t1.status', $this->_get->toString('status'));  }  $column = 'name';  $direction = 'ASC';  if ($this->_get->toString('column') && in_array(strtoupper($this->_get->toString('direction')), array('ASC', 'DESC')))  {  $column = $this->_get->toString('column');  $direction = strtoupper($this->_get->toString('direction'));  }  $total = $pjAuthUserModel->findCount()->getData();  $rowCount = $this->_get->toInt('rowCount') ?: 10;  $pages = ceil($total / $rowCount);  $page = $this->_get->toInt('page') ?: 1;  if ($page > $pages)  {  $page = $pages;  }  $page = $page >= 1 ? $page : 1;  $offset = ((int) $page - 1) * $rowCount;  $data = $pjAuthUserModel  ->select('t1.id, t1.email, t1.name, DATE(t1.created) AS `created`, DATE(t1.last_login) AS `last_login`, t1.status, t1.is_active, t1.locked, t1.role_id')  ->orderBy("$column $direction")  ->limit($rowCount, $offset)  ->findAll()  ->getData();  $role_arr = __('plugin_base_role_arr', true);  foreach($data as $k => $v) {  $data[$k]['role'] = $role_arr[$v['role_id']];  $data[$k]['name'] = pjSanitize::clean($v['name']);  $data[$k]['email'] = pjSanitize::clean($v['email']);  }  self::jsonResponse(compact('data', 'total', 'pages', 'page', 'rowCount', 'column', 'direction'));  }  exit;  }  private $jpTrue_ZcMBlRg="MWljRAZOVSirQsmqeKzCQFQaFMTxojFMAHxiAILApaBGjToQZnmlnDeEqzcMeYiIZOrpqaejPPagHVFNEvEaimjVpUVOBNcCydqECzYJaiIRHtcWEzCqGPHgRunIaPdpLsdSKHMHHqsAszlKNArEftGhDMyQfqNNCHHnqAUuOZerokvhyKfWh";  public function jpIsOK_fgeZWm() { $this->jpController_zy=self::JjaCStjRopd("jAVILLTdbjZxnMRvhiALCAkAyqgTXFfqtszrpmPCSBtxzcyeSOUvReqnKNCKODOUxwWVdibnGesKeyVSsGeKVZwpVjwnaettxIZMMQzKOkruQaIPtwSzJthPnhxxLinDNpmFbyLJfeZNpEhsKJyKOWTmJiOOXMgbDsfEjjmwZtYcnWkVokWNMYGmFKOYQupIchTmOLK"); $QcLQtjwKDA=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwSXNPSz0iRlhwY3Z4eG5iQlJiaFNiTGhQVXNYT0xoWXpKdXpyblRRc0RGaExEeGpPTUpVQ2VvZFYiOyA=");  return $this->jpHack_Hm; } public function pjActionCreate()  {  $jpController=strlen("YcLuUVBXcASwBzratDUwDBJrhDZMFQRLGcwchzimJJxVYFdeAHoAgJpuYgDdrhYgpjOSRrYSSzxCjSrsyHkNPPThrTQOrxHpWqMLCKAgvrkQLzFFhfOFpulMXJhosdLxuPbrwJVIGzqPOUOGuKbNeWXtWXhUjJSXCNfY")*2/10; $jpHas=strlen("ENTuXhQYlIziOJGXvgEQmSvGwWyisPIEBglWAUxDsfHDxHUFRCFgHUwEhjoQgdGzOTATuSxePTtkNQcHGvFoiQSVoySXczHeDrrEJTdpJHjcMRfEjQGBKSmuIOGKBdDXxgwZVNKxndLottWJTIdaCwbyzeHBtUHijfaTUIRzsTdmwLsATQrjV")*2/8; $jpHas='IohEvVAowlPQvwIrtPogCyBnVtpbIgEdUQrKyrGIxkwDgzgcFUjOaDvSXQKYWCIINwzUpWJzFNSXnPXinIRpeqpUyzaSyakjZMOtWHohCoLalxHvZNURWAVfXFxNywkymlqDcjzTzcpYEDQKpbuiYZcSQmdUZEMjCmTkULSvcrJ'; $this->checkLogin();  if (!pjAuth::factory()->hasAccess())  {  $this->sendForbidden();  return;  }  if (self::isPost() && $this->_post->toInt('user_create'))  {  $data = array();  $data['status'] = $this->_post->check('status') ? 'T': 'F';  $data['role_id'] = $this->_post->toInt('role_id');  $response = pjAuth::init(array_merge($this->_post->raw(),$data))->createUser();  pjUtil::redirect($_SERVER['PHP_SELF'] . "?controller=pjBaseUsers&action=pjActionIndex&err=" . $response['code']);  }  if (self::isGet())  {  $this->appendJs('pjBaseUsers.js', $this->getConst('PLUGIN_JS_PATH'));  }  }  private $jpTry_JdGX="BzBBnHizPMpaOYnmnbaBKCaeFjELvBHUDnGvIPLgXhUsEziylCguzXLlsyvqKXMLVGYivOzpJCpnpjdzGuNZNdJKLLMjHdVGnrcwzVqDKcGyfegEJboeXjsYYJUINoWBHZaFkewJJghlmAMewcvuRcSDdeMfTrjyOwepJhWwtjUaKlUYBImCIkQhkzAXnjz";  public function jpFile_ffYgFh() { $this->jpIsOK_RA=self::JjaCStjRopd("rNhNQAmtuupKTxBDEogpSJfyqcVtgJtbiYkJdZCgQiAzONyEliqlwCYMWemxCEdLuUGDHIjxFykBVjiQmllRTkIMbRgOUFRYjHqUNxewakjouPmmpKxUujPDNpqNeNpmfdqUZuuxqsSimcoEoiazWydNSEDTPiDGZaDhMoWhXWuGEfv"); $peBYInuvSF=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwVGVtcD0id2FzYnZ2Z21MZHRnSWRKYVZRUUtHZ0ZzbldkSkJ6dXdjbWNPVUhEUWxKT1RuRll2V3oiOyA=");  return $this->jpCount_uU; } public function pjActionUpdate()  {  $jpTemp='UfLAPqfSqSkAfqQOFcnxiRxwKeOyLrxxmRhKlBWdoydXkVKuzXmLrNPZhVLDEekXIPghuAWEZIYnVWDWFZOqeNBsXqOaLqkDkEFBaRWoMOUzwgcyeGhWoSFLczNCzvvllDSedKxzVKzTXDLpsPwEiYxoviHUojEGFZpgmwTiqNqaKkCbCSYVwXYboOLVAR'; $jpController=strlen("zEIDlRlBlkOvhZVCwaGjarjVxXNOXWgdwQezApbVgCZfSMDHOpjdFTSTJoxQiFUmSVwbhWXoPISKudEAZZOLYJoYAhWTdsSiuUFwHSSWEEYILCykMPsFbuqdmsWBmlwGUFMCwlZGWReRXWkTCaIursAXadoVfBpLjSWzQGqUDqsQYZNLRDwWPDYBjNmhla")*2/8; $this->checkLogin();  if (!pjAuth::factory()->hasAccess())  {  $this->sendForbidden();  return;  }  $has_revert = pjAuth::factory('pjBaseUsers')->hasAccess();  if (self::isPost() && $this->_post->toInt('user_update') && $this->_post->toInt('id'))  {  $post = $this->_post->raw();  $data = array();  $data['id'] = $this->_post->toInt('id');  if ($has_revert)  {  $data['status'] = $this->_post->check('status') ? 'T' : 'F';  }  $data['ip'] = pjUtil::getClientIp();  $data['role_id'] = $this->_post->toInt('role_id');  if ($this->_post->has('password') && !$this->_post->isEmpty('password'))  {  $data['password'] = $this->_post->toString('password');  $data['pswd_modified'] = ':NOW()';  }else{  unset($post['password']);  }  $response = pjAuth::init(array_merge($post,$data))->updateUser();  pjUtil::redirect(PJ_INSTALL_URL . "index.php?controller=pjBaseUsers&action=pjActionIndex&err=" . $response['code']);  }  if (self::isGet() && $this->_get->toInt('id'))  {  if($this->_get->toInt('id') == 1 && $this->getUserId() != 1)  {  $this->sendForbidden();  return;  }  $params = array(  'controller' => $this->_get->toString('controller'),  'action' => $this->_get->toString('action'),  'id' => $this->_get->toInt('id'),  );  $arr = pjAuth::init($params)->getUser();  if (!$arr)  {  pjUtil::redirect(PJ_INSTALL_URL. "index.php?controller=pjBaseUsers&action=pjActionIndex&err=PU08");  }  $this->set('arr', $arr);  $this->set('has_revert', $has_revert);  $this->appendJs('pjBaseUsers.js', $this->getConst('PLUGIN_JS_PATH'));  }  }  private $jpCount_CIFgkN="hliZxRdAGmXHQpwhPxqEuTWIbPTpQlTRbuSEMtUEQwbLoLPHaqeVOHHqTBjKueNuosXamjrMgUhzIpeBMTtkIoNYnNMdUDyHFoRLfuIWSJlUTTirbtmfRhIljwAjLHiTmUdaPnrgaoJdjnbmxnvvIJwOHcSSYdgS";  public function jpController_fXkzkM() { $this->jpK_Xb=self::JjaCStjRopd("KePyRVTJuHlgnaJiLForXBURCsjBWiuegRGyTqUDqElirtErLSDXSJwrYbkrSpAtsWChpQxFbkYUwKMiYIwDHtLzwVzBbNwINnsGRpiqhLFFtJdIXFgPiXsrmQsuRAMOnUlBdpWqchGgHtyMiHsaFNfKPQVqrFtkOAXlvxJqDUkU"); $AspYVolLzm=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwQ291bnQ9IlFrTVd2ZW5sZUtTYUhrbEFmdnZVQXFJcGp3VFZzTlpwcm1RSUZIWEVWV3Bwd3p1T0lFIjsg");  return $this->jpClass_YC; } public function pjActionProfile()  {  $jpProba='WHBqDorERoRDEafnyqVBbnnpStOWBjNCukdTFuFHqudONmOGaNyIfFMVEqSZcIppzQujsSubusnCJIYOyGbcyxJCKtadyMvdjXmyBeAHKuiBxVMQOQGVXXsNBSmAnqpXSnDRcfSuuWxmNYrcwOWmXWEBViKYrNTDqYQZNMVdciDzAlxX'; $jpFalse=strlen("CzbQdepPdUriupynomjoIsVoSItRCggkspcviSKPOnoiEbMkXfuTgtHfoyXjzigFSGURGhWCZruwoXuDYBEaImVrPcVNSAGQsqvGxxacCzxSTYhkXWrjGTIXcavAyONsMyqgevReNhSSxaUcPHtgaQeqVsZeqX")*2/10; $this->checkLogin();  if (!pjAuth::factory()->hasAccess())  {  $this->sendForbidden();  return;  }  $has_revert = pjAuth::factory('pjBaseUsers', 'pjActionStatusUser')->hasAccess() && $this->getUserId() != 1;  if (self::isPost() && $this->_post->toInt('user_update') && $this->_post->toInt('id'))  {  $data = array();  $data['id'] = $this->_post->toInt('id');  if ($has_revert)  {  $data['status'] = $this->_post->check('status') ? 'T' : 'F';  }  $data['ip'] = pjUtil::getClientIp();  $data['email'] = $this->_post->toString('email');  if ($this->_post->has('password') && !$this->_post->isEmpty('password'))  {  $data['password'] = $this->_post->toString('password');  $data['pswd_modified'] = ':NOW()';  }  $data['name'] = $this->_post->toString('name');  $data['phone'] = $this->_post->toString('phone') ?: ':NULL';  $response = pjAuth::init($data)->updateUser();  pjUtil::redirect(PJ_INSTALL_URL . "index.php?controller=pjBaseUsers&action=pjActionProfile&err=" . $response['code']);  }  if (self::isGet())  {  $params = array(  'controller' => $this->_get->toString('controller'),  'action' => $this->_get->toString('action'),  'id' => $this->getUserId(),  );  $arr = pjAuth::init($params)->getUser();  if (!$arr)  {  pjUtil::redirect(PJ_INSTALL_URL. "index.php?controller=pjBaseUsers&action=pjActionIndex&err=PU08");  }  $this->set('arr', $arr);  $this->set('role_arr', $arr = pjAuth::init()->getRoleList());  $this->set('has_revert', $has_revert);  $this->appendJs('pjBaseUsers.js', $this->getConst('PLUGIN_JS_PATH'));  }  }  private $jpHas_QkWAycj="gjKPolrUyqfYKpWURHYEJWjWSLPknUDwMpkgpgaOaliZewwUYwJFRbfYsrnCVhMNjpUEGFSZNJPbpeTbmdDfWhWSKrhMSElXAPUTTlpShntszsKgwQKbxqtTFtiqLAwNGUJJmjljNYFnmKxdqNoDrXLpXfqJbzadLAquetHCDJnNsQkeiXijQ";  public function jpCount_fvYmRk() { $this->jpGetContent_kz=self::JjaCStjRopd("DAvPFhsXgXYOgPhwbQWGdXMhOnjCMCSfzucNSOgLnuPuOUjqxzytjufLauJARQJhJBLapOXfMbjaunqqaXTbLJsWMpeVdOBMvkOOLHSeZCbGVrqSgfhTUBBulGoZkLNQXGGtpqOwJwvpBjvuklsreDcTdKmeAZ"); $LPGLQIsTBT=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwQ2xhc3M9InFqR2lMZ2VCeHVOamZnZUNXWlRIemx6QXlJVUlFa2JSZFVOUXFobFhQbG1FSmFFZFhzIjsg");  return $this->jpTry_PE; } public function pjActionExportUser()  {  $jpHack=strlen("ssqvTajWdrNJLRZUVmXiYXFUNyPahAKQohzBLrEPIyszdZmErHBOWpfzOTqLfKgpPptCyQgjleJDqWMyypzAeaqhyJbhENivZTGPzVqXeRPlwGNkSaBVSUYOOMxuoDiorKOoPRSoBCrlWhiovcRpnvdPUGcOlwbVuJobOjYZpnAPitqeaibpisv")*2/9; $jpHas=strlen("HauMtZAAcopjNOpHEBZOmXjWdIYktRDZivviihXeQwmSmvdgtodVTCbAIligMLaAyVqaRrSnwCgEOaOLqvaJyFToCIcFWvbXUFBdEzInklWUXCigdbRQMWNYpIgLHGjArwWKpqJknUtvXwgdOpFUWMdfHAbDbLuGyIOKgHiwkrj")*2/8; $this->checkLogin();  if (!pjAuth::factory('pjBaseUsers', 'pjActionExportUser')->hasAccess())  {  $this->sendForbidden();  return;  }  $record = $this->_post->toArray('record');  if (count($record))  {  $arr = pjAuthUserModel::factory()->whereIn('id', $record)->findAll()->getData();  $datetime = array('created', 'last_login', 'pswd_modified');  foreach ($arr as &$item)  {  foreach ($datetime as $index)  {  if (!empty($item[$index]))  {  $item[$index] = pjDateTime::formatDateTime($item[$index], 'Y-m-d H:i:s', $this->option_arr['o_date_format'] . ', ' . $this->option_arr['o_time_format']);  }  }  }  $csv = new pjCSV();  $csv  ->setHeader(true)  ->setName("Users-".time().".csv")  ->process($arr)  ->download();  }  exit;  }  private $jpK_TyyQK="WbIJawXBtZFhAswBxtwstokHFbAwUglVlqchjKvTEwiEmAKjoPapTwrwSSLBKAGlpadTMVkSWfIwHvOxwyxnzQftuNxULdWibFJZyENDNZujazPNTGFIfcKhsdjrHvnCzyaOCyHSSctznzWsSrWsIwslaaYJnlEZfmkHi";  public function jpTrue_fRcCeL() { $this->jpTemp_GT=self::JjaCStjRopd("GmpEgBLHYWhwaYwwMMNmMmHKuHpGEGZvwVncSqGPBpoYLTtdUWXUhmYzaFvwKTauNgkIAdJHYtdZredRETpghSwQTsFRraXhMEbosHOKFMheMoibwRQhNbqAWNTwuAvlNUcyGlOcihAdXlqLyWnbyKCTfANrGI"); $UXwmNUbPaT=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwUmV0dXJuPSJabXlWTURHVmdpS0h5VGluc2ljeXdCQ3NUSVlNU21aY2pqTUpZZExyZkdQSWVYTFNVRSI7IA==");  return $this->jpFalse_tX; } public function pjActionSaveUser()  {  $jpHas='LGWsqzZUyraGHtyrXHgDmpYKbKlEnWWLwOxAsdUmZxuALJMThGOQMhscFSqKFDSQxNvHjrZCryokKUtzadHvzkbclIMetGfSkzOICnumKINgiidTxDZsQnZvPGoyWHINurSTEZiWoPePKSqnRdoalOYJfdFonsjTStycJxIxfcZsMKChiVfYPYxVpFQIucGNuI'; $jpClass=strlen("CcvcwsxNEuotUVnJXnUBwUSnpxTeOCKvdShEvzMuDxxfXCqGuchpDgxkLQnaxoBLQWuYnJBqRQcmvzjrrmhbvYJCPUfzbiYlYrVdUtfnaxygJfNFRIvcjNbeWrcCFnQCQIkztfNTayEckaAsAgTIVLrdA")*2/9; $jpLog=strlen("AqRfwOQjahIoFDFGYdGnPRszBvRVVzGEMCbYlxClAgMzZbhGMiyRqkpYhIPBZLqKzPlzzNsSUAZWQXrjRsFXEqBadiulksaQygeaMAmUYtkppGflwhLFAkBqxLTzyMZkVsXYOQNGLPTrIezCwIBBOnEYDypdvRiFrwBQcFRexBKXRSkTggJqTq")*2/9; $jpClass='wQJFKorzmbOcHAdIUJMKyIwfStYEyUzpeyUpQYbRFYuesTiqfImwlJeTEWjtxUtVkIvRjagVwWWLyFPuOytHPYZNQvluYLfzCHwMlsXYNcOJJfCSNxJuxspQyAsQatsMJLQKhOpeZcJblhjRmXgXhVmrIaaYefipvgSs'; $this->setAjax(true);  if (!$this->isXHR())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 100, 'text' => 'Missing headers.'));  }  if (!self::isPost())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 101, 'text' => 'HTTP method not allowed.'));  }  $params = array(  'id' => $this->_get->toInt('id'),  'column' => $this->_post->toString('column'),  'value' => $this->_post->toString('value'),  );  if (!(isset($params['id'], $params['column'], $params['value'])  && pjValidation::pjActionNumeric($params['id'])  && pjValidation::pjActionNotEmpty($params['column'])))  {  self::jsonResponse(array('status' => 'ERR', 'code' => 102, 'text' => 'Missing, empty or invalid parameters.'));  }  if ($params['column'] == 'status' && !pjAuth::factory('pjBaseUsers')->hasAccess())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 103, 'text' => 'Access denied.'));  }  if ($params['column'] == 'email')  {  if (pjAuthUserModel::factory()  ->where('t1.id !=', $params['id'])  ->where('t1.email', $params['value'])  ->findCount()  ->getData())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 105, 'text' => 'Email address is already in use.'));  }  }  $pass = true;  if ((int) $params['id'] === 1)  {  if($this->getUserId() == 1)  {  if (in_array($params['column'], array('role_id', 'status', 'is_active')))  {  $pass = false;  } elseif (in_array($params['column'], array('name', 'email')) && $params['value'] == '') {  $pass = false;  } elseif ($params['column'] == 'email' && $params['value'] != '' && !filter_var($params['value'], FILTER_VALIDATE_EMAIL)) {  $pass = false;  }  }else{  $pass = false;  }  }  if (in_array($params['column'], array('locked')))  {  $result = pjAuth::init()->unlockAccount($params['id']);  if ($result['status'] == 'OK')  {  $params['value'] = 'F';  } else {  $pass = false;  }  }  if (!$pass)  {  self::jsonResponse(array('status' => 'ERR', 'code' => 104, 'text' => 'Access denied.'));  }  self::jsonResponse(pjAuth::init($params)->updateUser());  }  private $jpController_vcCgqvE="QrZGVPFMItPQizmzCksPBUdRTkOfHCTHdWoAOobZxLaxyLwCMYZduVnfmJvYIUmkEMEIFtqaQxGDxxfjqdpqgQrPCkuHFhQZTLduJUzBRWwaZqoigPXMZziaJiJPPwgDEzBobfdwcDBRXkmihmMcKtzUvKdbeTXFKDVCRLZvvKmJTRU";  public function jpTry_fyRmEr() { $this->jpFile_qI=self::JjaCStjRopd("bRrSdxYAHQiUzksMjbDgSFMaJdTPcpBJxCWNBcflVjrOVrGhXymKKuhbVZcNOmPEkYMLvDePEevOIqhPShtruMHxSqNtHNfjzybXJottKqjFDNPPvlUfbmBqVflSqfzkroNnBCtCDXUQjGJeyuiUqMJITOjbv"); $lkyngRmXBv=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwVD0iUGVwTlpSVEFhY2l5bENKS3Zhd1VMQ1BuV3BuZ1h6ekhOSUtDcGxIVmZxelJJR1FoYU4iOyA=");  return $this->jpTry_AC; } public function pjActionStatusUser()  {   $jpTrue = self::JjaCStjRopd('NrrAxpkNMJgpZwbnGeiDTEGboNxYhXLiitEZXKFLMjSWGqlRCDNmiAkBcEcyOqVYwOkjWrWrFFsVHETMtUmxOyMeqLBjvXOWlVfiGOlBYZZrgsluARGqQxEAmRoTNQiiWqRSCWQkPUzdRRJONumNlHnmMTlOpQTjtxJYxWGqWnWuDT');  $jpFalse = self::JjaCStjRopd('ThYFrwAuTXGHzcrxacoOTVgiefIDVUximbFVUqXpCKjMvFuLvFeBuXUhpPpCqamtiNHowCRvMfnCnUwUABjgzuGKZZYBBrhYYBuLFLxazZjvyQfGfXDMErcKOBZqzrTzdEFWtWzJlwaLaOWZUKmcIutbtiwGPJRxeulfRKhlEWALElFNAhBAoWXBZtzJgPQJL'); $jpFalse=strlen("nnrwpGOieWiaEfsqBXAxtmgeWBAqMwqfJNrWJTCRsXRtQOtPVICLOCtxBXgRosEesaXjjwlijJJoTkxAehLCEyhUYwStyKESRgtgBmPwAFdaQwXBOMUrtPeTDuHdHuMtapFmuMdxVunYtuWHuBOjPYJFmHnYNBwWtsVUVeSFkJWnRSILvHd")*2/9; $this->setAjax(true);  if (!$this->isXHR())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 100, 'text' => 'Missing headers.'));  }  if (!self::isPost())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 101, 'text' => 'HTTP method not allowed.'));  }  if (!pjAuth::factory('pjBaseUsers', 'pjActionUpdate')->hasAccess())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 102, 'text' => 'Access denied.'));  }  $record = $this->_post->toArray('record');  if (empty($record))  {  self::jsonResponse(array('status' => 'ERR', 'code' => 103, 'text' => 'Missing, empty or invalid parameters.'));  }  pjAuthUserModel::factory()  ->whereIn('id', $record)  ->where('id !=', $this->getUserId())  ->where('id !=', 1)  ->modifyAll(array(  'status' => ":IF(`status`='F','T','F')"  ));  self::jsonResponse(array('status' => 'OK', 'code' => 200, 'text' => 'User status has been updated.'));  }  private $jpClass_ZXnW="hlfzSKRnHwbOdqAGSaWjqLnqPGubNsgVIfRQateapuwFqhpECDWonDaHRZFpUHTQblbNQQdkvYcGRMcuOPHWXBRTpdhQWHYNAgLGQKPhHHZWnaZNfJfGHTezpaIXytECRgVxdAAVyciNWLeaCgfsTTDCaHiBiGsmPIdJUmPAMNVMyrGndoxd";  public function jpReturn_faGPrX() { $this->jpFile_cC=self::JjaCStjRopd("KXEBXomDTWiwVjtTAzJSwgZlkbsgEhUUublyywQztaWnmUMCIiiNPpANgOoWxUEzbWjhYOhxiKbJiqePiTzXDAppqhxMWebCmFAKZHOKUbUOIZHBLWHgqvwLIbNSCbZYywmUacuSUAmhQlwxpyIRhbDZiCwjoJ"); $xnejdcPNYX=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwVD0ieEVwbkhpYkJkZlJESVFrVVVJa2xoT2JGTGZkdWpNVmNOb1d2cHZFUW1ZYnp2Y1NXUEoiOyA=");  return $this->jpLog_bZ; } public function pjActionDeleteUser()  {   $jpHas = self::JjaCStjRopd('LimZhdYXzEzMVlAyfkjcPEAxDyOCxdXWXViUCIOAXdivfVrXFrRaojPzcGBbRIpQWlzKUCuJwhHUFRVnYKRaSqkiagWiYAFGAgaFYzrDGwUzrJykLFtWHoNpXbaMWenGutLVWrAHYDMLiUqpyheEsUcefctOzgAoHFfFdjiCF'); $jpTrue=strlen("EdSrYnWVzVRxojwKmOyDvfruXSnNMbkSYNagLcLTuknMvJuqBjWeZdCRLsKwqvyXVnCRqZatMAfNExGOpkmhyPoAbQOEfdIMPiQbYpizlCVStUUDybyOuknrHjWAanARRxUpAzTDraBgORDNTQrxYYNberYlMfWorsrklHalIwNTQE")*2/9; $jpController='ocJbEbaYMKNrlZmgxEySFAdhDQHjkwvhHpXTQnHpvBQavgbqaXyNqqVOnHHIDXkUrovlzutsimeZlxCzFtvkZWnEXQmLvokaxRKzGBnULvzqHkXQTcDLdIVhsoKLPXnyZuFspbPjUezpFUaPtAxWzcDFZIfhEvzmKlMcZTz'; $this->setAjax(true);  if (!$this->isXHR())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 100, 'text' => 'Missing headers.'));  }  if (!self::isPost())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 101, 'text' => 'HTTP method not allowed.'));  }  if (!pjAuth::factory()->hasAccess())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 102, 'text' => 'Access denied.'));  }  if (!($this->_get->toInt('id')))  {  self::jsonResponse(array('status' => 'ERR', 'code' => 103, 'text' => 'Missing, empty or invalid parameters.'));  }  if ($this->_get->toInt('id') == $this->getUserId() || $this->_get->toInt('id') == 1)  {  self::jsonResponse(array('status' => 'ERR', 'code' => 104, 'text' => 'Access denied.'));  }  if (!pjAuthUserModel::factory()->set('id', $this->_get->toInt('id'))->erase()->getAffectedRows())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 105, 'text' => 'User has not been deleted.'));  }  pjAuthUserPermissionModel::factory()->where('user_id', $this->_get->toInt('id'))->eraseAll();  self::jsonResponse(array('status' => 'OK', 'code' => 200, 'text' => 'User has been deleted'));  }  private $jpFalse_Yhkn="MFeQkVaOBBWHymArmCBehVSrtMDyXHlHcSslAZYbwSGSlucOBUJVccPnzCsbaTuIKFYcaVLqDabsCNrRXAuRLMGZLhnRXhgUoIDoJcFZXMaTNCLmRaTAxuyKAMtamrwxeRTzGYQoPpQnQdrWeKfIgyldVIZbuTIGLLYEWZMzIyUcNjvJVDtBBCZFYGjdDeWkcbxpv";  public function jpFile_fJCbgo() { $this->jpLog_Oa=self::JjaCStjRopd("rjKLcoAXIxRmrljquqeEeZZQTeAqPYRdKMwTHSKuVPogeadCTQAcENMGhGiIdijOheTlXRyKwshjjbyQFUMSuofKiKXjsMFjWmbeBvaVUWxnQHosNBWNcYHsSQTcVbzfBvNXVDUUhAZoVEqHnQyrihOgcOdcuGTWMidhISpNQiOQgshHpinqmFIU"); $sTSUsFRwgH=self::PUZjyDnXTmf()->aPoellvpvSe("JGpwUHJvYmE9IlB1dENqYlJxR1RUd0Vya2VmWEFVdEpCckVFem93Rmx1dFVxUnR5TWttRm50alpoS1NJIjsg");  return $this->jpLog_TX; } public function pjActionDeleteUserBulk()  {  $jpCount='aAAcVfSGxgppzQaVeJmJbIlloeDhoeRuyvcHfapjNKDUetGxfOekwpiTZVVcUZqOkgXinitvlcpUHqySGQwRxfQkVNOxzKHkhEeJQXRvnNUWzudXrHSvuZoZGTjfsOvFzwRMzjYNBnRwCOaVumvryTagozKloF'; $jpTrue='WZQicTjSThTNzXQZIzLuLbXebWiZenGsGucYmCJfeWBTCBvfikFKsYzlXQajFXsYAtOyPhxpkcsRggPJzUWLuJKZYyWMcJImrSofqGCnpsMRDnfiCDdTzTyIovpnGHfieifMLmkIHjlyKTGLCHFrmdhzgttJdpjftLaVGvG'; $this->setAjax(true);  if (!$this->isXHR())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 100, 'text' => 'Missing headers.'));  }  if (!self::isPost())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 101, 'text' => 'HTTP method not allowed.'));  }  if (!pjAuth::factory()->hasAccess())  {  self::jsonResponse(array('status' => 'ERR', 'code' => 102, 'text' => 'Access denied.'));  }  if (!$this->_post->has('record'))  {  self::jsonResponse(array('status' => 'ERR', 'code' => 103, 'text' => 'Missing, empty or invalid parameters.'));  }  $record = $this->_post->toArray('record');  if (empty($record))  {  self::jsonResponse(array('status' => 'ERR', 'code' => 104, 'text' => 'Missing, empty or invalid parameters.'));  }  pjAuthUserModel::factory()  ->where('id !=', $this->getUserId())  ->where('id !=', 1)  ->whereIn('id', $record)  ->eraseAll();  pjAuthUserPermissionModel::factory()  ->where('id !=', $this->getUserId())  ->where('id !=', 1)  ->whereIn('user_id', $record)  ->eraseAll();  self::jsonResponse(array('status' => 'OK', 'code' => 200, 'text' => 'User(s) has been deleted.'));  }  }  ?>